set(LIBTENSORFLOWLITE_VERSION 2.16.1)

option(TENSORFLOWLITE_ROOTDIR "tensorflowlite root dir")
set(TENSORFLOWLITE_DIR_NAME "tensorflowlite-${LIBTENSORFLOWLITE_VERSION}")
set(TENSORFLOWLITE_ROOTDIR ${CMAKE_CURRENT_SOURCE_DIR}/modules/${TENSORFLOWLITE_DIR_NAME})

if(EXISTS ${TENSORFLOWLITE_ROOTDIR}/)
    message(STATUS "Tensorflow Lite library found at ${TENSORFLOWLITE_ROOTDIR}")
else()
    file(MAKE_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/modules/${TENSORFLOWLITE_DIR_NAME}/)
    message(STATUS "Tensorflow Lite library not found - downloading pre-built library.")
    if(WIN32)
        set(LIB_TENSORFLOWLITE_PRE_BUILD_LIB_NAME "tensorflowlite_c-${LIBTENSORFLOWLITE_VERSION}-Windows")
    elseif(UNIX AND NOT APPLE AND NOT ANDROID)
        if(CMAKE_SYSTEM_PROCESSOR STREQUAL "aarch64")
            set(LIB_TENSORFLOWLITE_PRE_BUILD_LIB_NAME "tensorflowlite_c-${LIBTENSORFLOWLITE_VERSION}-Linux-aarch64")
        elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL "arm")
            set(LIB_TENSORFLOWLITE_PRE_BUILD_LIB_NAME "tensorflowlite_c-${LIBTENSORFLOWLITE_VERSION}-Linux-armeabi-v7a")
        else()
            set(LIB_TENSORFLOWLITE_PRE_BUILD_LIB_NAME "tensorflowlite_c-${LIBTENSORFLOWLITE_VERSION}-Linux")
        endif()
    elseif(UNIX AND APPLE)
        message(STATUS "CMAKE_OSX_ARCHITECTURES: ${CMAKE_OSX_ARCHITECTURES}")
        if (CMAKE_OSX_ARCHITECTURES STREQUAL "x86_64")
            set(LIB_TENSORFLOWLITE_PRE_BUILD_LIB_NAME "tensorflowlite_c-${LIBTENSORFLOWLITE_VERSION}-macOS-x86_64")
        elseif (CMAKE_OSX_ARCHITECTURES STREQUAL "arm64")
            set(LIB_TENSORFLOWLITE_PRE_BUILD_LIB_NAME "tensorflowlite_c-${LIBTENSORFLOWLITE_VERSION}-macOS-arm64")
        else ()
            if (CMAKE_HOST_SYSTEM_PROCESSOR STREQUAL "x86_64")
                set(LIB_TENSORFLOWLITE_PRE_BUILD_LIB_NAME "tensorflowlite_c-${LIBTENSORFLOWLITE_VERSION}-macOS-x86_64")
            elseif(CMAKE_HOST_SYSTEM_PROCESSOR STREQUAL "arm64")
                set(LIB_TENSORFLOWLITE_PRE_BUILD_LIB_NAME "tensorflowlite_c-${LIBTENSORFLOWLITE_VERSION}-macOS-arm64")
            else()
                message(FATAL_ERROR "CMAKE_OSX_ARCHITECTURES and CMAKE_HOST_SYSTEM_PROCESSOR not defined.")
            endif()
        endif()
    elseif(ANDROID)
        if (ANDROID_ABI STREQUAL "arm64-v8a" OR ANDROID_ABI STREQUAL "armeabi-v7a")
            set(LIB_TENSORFLOWLITE_PRE_BUILD_LIB_NAME "prebuiltlibs/${ANDROID_ABI}/libtensorflow-lite")
        else()
            message(FATAL_ERROR "Unsupported ANDROID_ABI: ${ANDROID_ABI}")
        endif()
    endif()

    if(NOT ANDROID)
        set(LIBTENSORFLOWLITE_URL https://github.com/faressc/tflite-c-lib/releases/download/v${LIBTENSORFLOWLITE_VERSION}/${LIB_TENSORFLOWLITE_PRE_BUILD_LIB_NAME}.zip)
        message(STATUS "Downloading ${LIBTENSORFLOWLITE_URL}")
        set(LIBTENSORFLOWLITE_PATH ${CMAKE_BINARY_DIR}/import/${LIB_TENSORFLOWLITE_PRE_BUILD_LIB_NAME}.zip)

        file(DOWNLOAD ${LIBTENSORFLOWLITE_URL} ${LIBTENSORFLOWLITE_PATH} STATUS LIBTENSORFLOWLITE_DOWNLOAD_STATUS SHOW_PROGRESS)
        list(GET LIBTENSORFLOWLITE_DOWNLOAD_STATUS 0 LIBTENSORFLOWLITE_DOWNLOAD_STATUS_NO)

        file(ARCHIVE_EXTRACT
                INPUT ${CMAKE_BINARY_DIR}/import/${LIB_TENSORFLOWLITE_PRE_BUILD_LIB_NAME}.zip
                DESTINATION ${CMAKE_CURRENT_SOURCE_DIR}/modules/${TENSORFLOWLITE_DIR_NAME}/)

        file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/modules/${TENSORFLOWLITE_DIR_NAME}/${LIB_TENSORFLOWLITE_PRE_BUILD_LIB_NAME}/ DESTINATION ${CMAKE_CURRENT_SOURCE_DIR}/modules/${TENSORFLOWLITE_DIR_NAME}/)

        file(REMOVE_RECURSE ${CMAKE_CURRENT_SOURCE_DIR}/modules/${TENSORFLOWLITE_DIR_NAME}/${LIB_TENSORFLOWLITE_PRE_BUILD_LIB_NAME})

        if(LIBTENSORFLOWLITE_DOWNLOAD_STATUS_NO)
            message(STATUS "Pre-built library not downloaded. Error occurred, try again and check cmake/SetupTensorflowLite.cmake")
            file(REMOVE_RECURSE ${CMAKE_CURRENT_SOURCE_DIR}/modules/${TENSORFLOWLITE_DIR_NAME})
            file(REMOVE ${LIBTENSORFLOWLITE_PATH})
        else()
            message(STATUS "Linking downloaded TensorflowLite pre-built library.")
        endif()
    endif()
endif()

set(ANIRA_TENSORFLOWLITE_SHARED_LIB_PATH "${TENSORFLOWLITE_ROOTDIR}")

get_directory_property(hasParent PARENT_DIRECTORY)
if(hasParent)
    set(ANIRA_TENSORFLOWLITE_SHARED_LIB_PATH "${ANIRA_TENSORFLOWLITE_SHARED_LIB_PATH}" PARENT_SCOPE)
endif()

# Set the TensorFlow Lite library to link with and adjust include path for Android
if(ANDROID)
    set(TFLITE_LIBRARY ${CMAKE_CURRENT_SOURCE_DIR}/prebuiltlibs/${ANDROID_ABI}/libtensorflow-lite.a)
    list(APPEND BACKEND_BUILD_HEADER_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/prebuiltlibs/include")
    list(APPEND BACKEND_BUILD_LIBRARY_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/prebuiltlibs/${ANDROID_ABI}")
else()
    set(TFLITE_LIBRARY ${TENSORFLOWLITE_ROOTDIR}/lib/libtensorflowlite_c.so)
    list(APPEND BACKEND_BUILD_HEADER_DIRS "${TENSORFLOWLITE_ROOTDIR}/include")
    list(APPEND BACKEND_BUILD_LIBRARY_DIRS "${TENSORFLOWLITE_ROOTDIR}/lib")
endif()